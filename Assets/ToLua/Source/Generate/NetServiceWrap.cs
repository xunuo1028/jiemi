//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetServiceWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NetService), typeof(System.Object));
		L.RegFunction("GetInstance", GetInstance);
		L.RegFunction("Connect", Connect);
		L.RegFunction("PacketDispatcher", PacketDispatcher);
		L.RegFunction("Stop", Stop);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("NetConnections", get_NetConnections, set_NetConnections);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NetService o = NetService.GetInstance();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetService obj = (NetService)ToLua.CheckObject(L, 1, typeof(NetService));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			NetConnection o = obj.Connect(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PacketDispatcher(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetService obj = (NetService)ToLua.CheckObject(L, 1, typeof(NetService));
			System.Collections.IEnumerator o = obj.PacketDispatcher();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetService obj = (NetService)ToLua.CheckObject(L, 1, typeof(NetService));
			obj.Stop();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NetConnections(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetService obj = (NetService)o;
			System.Collections.ArrayList ret = obj.NetConnections;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NetConnections on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NetConnections(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetService obj = (NetService)o;
			System.Collections.ArrayList arg0 = (System.Collections.ArrayList)ToLua.CheckObject(L, 2, typeof(System.Collections.ArrayList));
			obj.NetConnections = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NetConnections on a nil value" : e.Message);
		}
	}
}

