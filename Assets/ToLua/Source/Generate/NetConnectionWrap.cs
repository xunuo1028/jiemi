//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetConnectionWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NetConnection), typeof(System.Object));
		L.RegFunction("Start", Start);
		L.RegFunction("Stop", Stop);
		L.RegFunction("SendPacket", SendPacket);
		L.RegFunction("SendDgram", SendDgram);
		L.RegFunction("New", _CreateNetConnection);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Address", get_Address, null);
		L.RegVar("Port", get_Port, null);
		L.RegVar("connected", get_connected, set_connected);
		L.RegVar("Packets", get_Packets, set_Packets);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNetConnection(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				NetService arg0 = (NetService)ToLua.CheckObject(L, 1, typeof(NetService));
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				NetConnection obj = new NetConnection(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: NetConnection.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetConnection obj = (NetConnection)ToLua.CheckObject(L, 1, typeof(NetConnection));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Start(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetConnection obj = (NetConnection)ToLua.CheckObject(L, 1, typeof(NetConnection));
			obj.Stop();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendPacket(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetConnection obj = (NetConnection)ToLua.CheckObject(L, 1, typeof(NetConnection));
			LuaByteBuffer arg0 = new LuaByteBuffer(ToLua.CheckByteBuffer(L, 2));
			obj.SendPacket(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendDgram(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetConnection obj = (NetConnection)ToLua.CheckObject(L, 1, typeof(NetConnection));
			LuaByteBuffer arg0 = new LuaByteBuffer(ToLua.CheckByteBuffer(L, 2));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SendDgram(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Address(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetConnection obj = (NetConnection)o;
			string ret = obj.Address;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Address on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Port(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetConnection obj = (NetConnection)o;
			int ret = obj.Port;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Port on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_connected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetConnection obj = (NetConnection)o;
			bool ret = obj.connected;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index connected on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Packets(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetConnection obj = (NetConnection)o;
			System.Collections.Queue ret = obj.Packets;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Packets on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_connected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetConnection obj = (NetConnection)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.connected = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index connected on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Packets(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetConnection obj = (NetConnection)o;
			System.Collections.Queue arg0 = (System.Collections.Queue)ToLua.CheckObject(L, 2, typeof(System.Collections.Queue));
			obj.Packets = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Packets on a nil value" : e.Message);
		}
	}
}

